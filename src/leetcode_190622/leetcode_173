# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class BSTIterator(object):

    def __init__(self, root):
        """
        :type root: TreeNode
        """
        self.root = root
        self.result = []
        self.traverse(root)
        print self.result
        

    def next(self):
        """
        @return the next smallest number
        :rtype: int
        """
        if self.result:
            return self.result.pop(0)
        
        

    def hasNext(self):
        """
        @return whether we have a next smallest number
        :rtype: bool
        """
        if self.result:
            return True
        return False
        
    def traverse(self, node):
        if node:
            self.traverse(node.left)
            self.result.append(node.val)
            self.traverse(node.right)
            


# Your BSTIterator object will be instantiated and called as such:
# obj = BSTIterator(root)
# param_1 = obj.next()
# param_2 = obj.hasNext()
