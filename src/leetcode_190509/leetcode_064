import math
class Solution(object):
    def minPathSum(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        self.L = grid
        m = len(grid)
        n = len(grid[0])
        self.memo = [[0] * n for i in range(m)]
        return self.minPathSumSub(m,n)
    
    def minPathSumSub(self, i, j):
        if i == 1 and j == 1:
            return self.L[0][0]
        if self.memo[i-1][j-1] != 0:
            return self.memo[i-1][j-1]
        result =self.L[i-1][j-1] + min((self.minPathSumSub(i-1, j) if i-1 > 0 else float('inf')), (self.minPathSumSub(i, j-1) if j-1 > 0 else float('inf')))
        self.memo[i-1][j-1] =result
        return result
